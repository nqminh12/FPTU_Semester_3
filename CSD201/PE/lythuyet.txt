------Thuật toán coloring--------------------------------
Các bước của thuật toán:
        Bước 1: Tính giá trị bậc của các đỉnh trong V. Lập danh sách V’:=[v1tv2, ...,vn] 
là các đỉnh của đồ thị được sắp xếp theo thứ tự bậc giảm dần: d(v1) > d(v2) > ... > d(vn).
 Ban đầu tất cả các đỉnh trong V (V’) đều chưa được tô màu.
Gán i := 1;
        Bước 2: Tô màu i cho đỉnh đầu tiên trong danh sách V’. 
Duyệt lần lượt các đỉnh khác trong V’(nếu có) và chỉ tô màu i cho các đỉnh không kề đỉnh đã có màu i.
        Bước 3: Kiểm tra nếu tất cả các đỉnh trong V đã được tô màu thì thuật toán kết thúc, 
đồ thị đã sử dụng  i màu để tô. Ngược lại, nếu vẫn còn đỉnh chưa được tô thì chuyển sang bước 4.
        Bước 4: Loại khỏi danh sách V’ các đỉnh đã tô màu. 
Sắp xếp lại các đỉnh trong V’ theo thứ tự bậc giảm dần. Gán i := i + 1 và quay lại bước 2.

------boundary folding hash function--------------------------------
1. Divide the key K into subkeys of equal or nearly equal length.
2. Perform an operation (e.g., addition, subtraction, or XOR) 
on all subkeys to calculate the final hash value.
3. Divide the hash value by the size of the hash table (Tsize)
to get the final hash value within the range of table indices.
------insert sort--------------------------------------------
public class InsertionSort {

    // Phương thức sắp xếp chèn
    void sort(int arr[]) {
        int n = arr.length;
        for (int i = 1; i < n; ++i) {
            int key = arr[i];
            int j = i - 1;

            // Di chuyển các phần tử của arr [0 ... i - 1], lớn hơn key
            // đến một vị trí trước vị trí hiện tại của chúng
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }
O(n^2)-O(n)
------Quick sort------------------------------------------------
QUICK SORT

chia cả dãy số log2(n) lần.
chọn phần tử khóa pivot là phần tử ở cuối
xếp các phần tử nhỏ trước phần chốt các phần tử to hơn ra sau chốt
các phần tử sẽ được so sánh với khóa và hoán đổi vị trí cho nhau
hoặc cho khóa nếu nó lớn hơn khóa mà lại nằm trước khóa, hoặc nhỏ hơn mà lại nằm sau khóa.
tiếp tục làm vậy cho đến khi mỗi đoạn chỉ còn 2 phần tử. Khi đó toàn bộ dãy đã được sắp xếp.

code chạy
ta bắt đầu từ phần tử ngoài cùng bên trái và theo dõi chỉ số của các phần tử nhỏ hơn (hoặc bằng) là i.
Trong khi duyệt, nếu ta tìm thấy một phần tử nhỏ hơn, ta hoán đổi phần tử hiện tại với arr[i]

phần tử i đi đến đâu sẽ fix các số nhỏ hơn pivot từ nó đến sau, sau vòng lặp đổi i + 1 với pivot
vì i + 1 là phần tử to hơn pivot đầu tiên trong dãy, sau khi đổi sẽ có dãy như dự tính

int partition(int arr[], int low, int high) {
        int pivot = arr[high];
        int i = (low - 1); // index of smaller element
        for (int j = low; j < high; j++) {

            // Nếu phần tử hiện tại nhỏ hơn chốt
            if (arr[j] < pivot) {
                i++;

                // swap arr[i] và arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // swap arr[i+1] và arr[high] (hoặc pivot)
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

ví dụ dãy: {10, 80, 30, 90, 40, 50, 70}
------Run Length Encoding------------------------------------
Run-Length Encoding (RLE) là một phương pháp đơn giản để nén dữ liệu. Nó là một kỹ thuật mã hóa dùng để biểu diễn thông tin trong dạng chạy (run), tức là các phần tử liên tiếp trong dữ liệu có cùng giá trị được thể hiện thành một đoạn chạy duy nhất. Khi áp dụng RLE, các đoạn chạy được thay thế bằng một cặp giá trị và độ dài của đoạn chạy đó.

Cơ bản, trong RLE, dữ liệu được biểu diễn bằng các cặp (symbol, length), trong đó:

Symbol: Giá trị của đoạn chạy, tức là giá trị của các phần tử liên tiếp trong dữ liệu.
Length: Số lượng phần tử có cùng giá trị (đoạn chạy) liên tiếp trong dữ liệu.
Ví dụ:

Giả sử có một chuỗi dữ liệu như sau: "AAAABBBCCDAA"

Áp dụng RLE, ta sẽ có kết quả: "4A3B2C1D2A"
Các đoạn chạy "AAAA", "BBB", "CC", "D", "AA" lần lượt được biểu diễn bằng cặp (symbol, length) là ("A", 4), ("B", 3), ("C", 2), ("D", 1), ("A", 2).















